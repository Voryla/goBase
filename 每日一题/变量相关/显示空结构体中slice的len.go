package main

/*
在规范中，有一节是关于 len 和 cap 的。有如下几个要点：
返回结果总是 int；
返回结果有可能是常量
有时对函数参数不求值，即编译期确定返回值；
2、3 点解释下。（规范中有说明）
如果 len 或 cap 的函数参数 v 是字符串常量，则返回值是一个常量。
如果 v 的类型是数组或指向数组的指针，且表达式 v 没有包含 channel 接收或（非常量）函数调用，则返回值也是一个常量。这种情况下，
不会对 v 进行求值（即编译期就能确定）。否则返回值不是常量，且会对 v 进行求值（即得运行时确定）。这一点是这道题的关键。
首先，x.s[99] 的类型是 [32]byte，它是一个数组，且表达式 x.s[99] 没有包含 channel 接收也不是函数调用，因此不会对 x.s[99] 进行求值，
不求值自然不会 panic（想不明白？可以想成没有解引用操作）。也就是说，编译器能够在编译阶段分析出 x.s[99] 的类型是 [32]byte，且不需要对 x.s[99] 求值，因此直接返回数组的长度，即 32。
*/
func main() {
	var x *struct {
		s [][32]byte
	}
	// output 32
	println(len(x.s[99]))
}
